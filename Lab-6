datapath:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity main is
    Port ( clk : in STD_LOGIC;
           clr : in STD_LOGIC;
           xselect : in STD_LOGIC;
           yselect : in STD_LOGIC;
           xld : in STD_LOGIC;
           yld : in STD_LOGIC;
           gld : in STD_LOGIC;
           xin : in STD_LOGIC_VECTOR (7 downto 0);
           yin : in STD_LOGIC_VECTOR (7 downto 0);
           gcd : out STD_LOGIC_VECTOR (7 downto 0);
           equal : out STD_LOGIC;
           lta : out STD_LOGIC);
end main;

architecture Behavioral of main is
component mux2g
generic( N: integer) ;
port( a: in std_logic_vector (N-1 downto 0);
b: in std_logic_vector (N-1 downto 0);
s: in std_logic;
y: out std_logic_vector(N-1 downto 0));
end component;
component reg
generic( N: integer :=8); 
port( load: in std_logic;
d: in std_logic_vector (N-1 downto 0);
clk: in std_logic;
clr: in std_logic;
q : out std_logic_vector(N-1 downto 0));
end component;


signal x,y,x1,y1,xmy,ymx: std_logic_vector(7 downto 0);

begin
xmy <= x-y;
ymx <= y-x;
EQ: process (x,y)
begin
    if x = y then
        equal <= '1';
    else
        equal <= '0';
    end if;
end process EQ;

LT: process(x,y)
begin 
    if x < y then
        lta <= '1';
    else 
        lta <= '0';
    end if;
end process LT;

M1: mux2g
    generic map ( N => 8)
    port map ( a => xmy, b=>xin, s => xselect, y => x1);
    
M2: mux2g
    generic map ( N => 8)
    port map ( a => ymx, b=>yin, s => yselect, y => y1);
    
R1: reg
    generic map ( N => 8)
    port map ( load => xld, d=>x1, clk => clk, clr => clr, q => x);

R2: reg
    generic map ( N => 8)
    port map ( load => yld, d=>y1, clk => clk, clr => clr, q => y);
    
R3: reg
    generic map ( N => 8)
    port map ( load => gld, d=>x, clk => clk, clr => clr, q => gcd);

end Behavioral;




control unit: 
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity control is
    Port ( clk : in STD_LOGIC;
           clr : in STD_LOGIC;
           go : in STD_LOGIC;
           equal : in STD_LOGIC;
           lta : in STD_LOGIC;
           xselect : out STD_LOGIC;
           yselect : out STD_LOGIC;
           xld : out STD_LOGIC;
           yld : out STD_LOGIC;
           gld : out STD_LOGIC);
end control;

architecture Behavioral of control is
type state_type is (start, input, test1, test2, update, update2, done);
signal present_state, next_state : state_type;


begin
sreg: process(clk,clr)
begin
    if clr = '1' then
        present_state <= start;
    elsif clk'event and clk = '1' then
        present_state <= next_state;
    end if;
end process;

C1: process (present_state,go,equal,lta)
begin
    case present_state is
        when start =>
            if go = '1' then
                next_state <= input;
            else
                next_state <= start;
            end if;
        when input =>
            next_state <= test1;
        when test1 =>
            if equal = '1' then
                next_state <= done;
            else 
                next_state <= test2;
            end if;     
        when test2 =>
            if lta = '1' then
                next_state <= update;
            else 
                next_state <= update2;    
            end if; 
        when update =>
            next_state <= test1;
        when update2 =>
            next_state <= test1;
        when done =>
            next_state <= done;
        when others =>
            null;
    end case;
end process;
C2: process (present_state)
begin
    xld <= '0'; yld <= '0'; gld <= '0';
    xselect <= '0'; yselect <= '0';
    case present_state is
        when input =>
            xld <= '1'; yld <= '1';
            xselect <= '1'; yselect <='1';
        when update => 
            yld <= '1';
        when update2 =>
            xld <= '1';
        when done =>
            gld <= '1';
        when others =>
            null;
    end case;            
end process;
end Behavioral;

gcd:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity gcd is
    Port ( clk : in STD_LOGIC;
           clr : in STD_LOGIC;
           go : in STD_LOGIC;
           xin : in STD_LOGIC_VECTOR (7 downto 0);
           yin : in STD_LOGIC_VECTOR (7 downto 0);
           gcd_out : out STD_LOGIC_VECTOR (7 downto 0));
end gcd;

architecture Behavioral of gcd is
    component main
    Port ( clk : in STD_LOGIC;
       clr : in STD_LOGIC;
       xselect : in STD_LOGIC;
       yselect : in STD_LOGIC;
       xld : in STD_LOGIC;
       yld : in STD_LOGIC;
       gld : in STD_LOGIC;
       xin : in STD_LOGIC_VECTOR (7 downto 0);
       yin : in STD_LOGIC_VECTOR (7 downto 0);
       gcd : out STD_LOGIC_VECTOR (7 downto 0);
       equal : out STD_LOGIC;
       lta : out STD_LOGIC);
    end component;
    
    component control
    Port ( clk : in STD_LOGIC;
           clr : in STD_LOGIC;
           go : in STD_LOGIC;
           equal : in STD_LOGIC;
           lta : in STD_LOGIC;
           xselect : out STD_LOGIC;
           yselect : out STD_LOGIC;
           xld : out STD_LOGIC;
           yld : out STD_LOGIC;
           gld : out STD_LOGIC);
    end component;
signal equal,lta,xselect,yselect: std_logic;
signal xld,yld,gld: std_logic; 

begin
U1: main
    port map ( clk => clk, clr => clr, xselect => xselect, yselect => yselect, xld =>xld,yld=>yld, gld => gld, xin => xin, yin=>yin, gcd => gcd_out , equal => equal,lta=>lta);
U2: control
    port map ( clk => clk, clr => clr, go => go, equal => equal, lta => lta, xselect => xselect, yselect => yselect, xld=> xld, yld => yld, gld=>gld);
     
end Behavioral;


top module:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity top is
    Port ( mclk : in STD_LOGIC;
           btn : in STD_LOGIC_VECTOR (3 downto 0);
           sw : in STD_LOGIC_VECTOR (7 downto 0);
           dp : out STD_LOGIC;
           ld : out STD_LOGIC_VECTOR (7 downto 0);
           a_to_g : out STD_LOGIC_VECTOR (6 downto 0);
           an : out STD_LOGIC_VECTOR (3 downto 0));
end top;

architecture Behavioral of top is
    component clkdiv
        port ( mclk: in std_logic;
        clr: in std_logic;
        clk25: out std_logic;
        clk190: out std_logic);
        end component;
        
    component gcd
        Port ( clk : in STD_LOGIC;
           clr : in STD_LOGIC;
           go : in STD_LOGIC;
           xin : in STD_LOGIC_VECTOR (7 downto 0);
           yin : in STD_LOGIC_VECTOR (7 downto 0);
           gcd_out : in STD_LOGIC_VECTOR (7 downto 0));  
    end component;
    
    component x7segbc
        port( x: in std_logic_vector (15 downto 0);
        cclk: in std_logic;
        clr: in std_logic;
        a_to_g: out std_logic_vector (6 downto 0);
        an: out std_logic_vector (3 downto 0);
        dp: out std_logic);
    end component;
          
    signal clk25, clk190, clr: std_logic;
    signal x: std_logic_vector (15 downto 0);
    signal gcds: std_logic_vector (3 downto 0);
    

begin
clr <= btn(3)
x <= X"000" & gcds;
ld <= sw;

U1: clkdiv
    port map ( mclk => mclk, clr => clr, clk25 => clk25, clk190 =>clk190);
    
U2: gcd
    port map ( clk => clk25, clr => clr, go => btn(0),xin => sw (15 downto 8), yin => sw( 7 downto 0), gcd_out => gcds);
    
U3: x7segbc
    port map ( x=>x, cclk => clk190, clr=> clr, a_to_g => a_to_g, an => an, dp => dp );    
end Behavioral;
